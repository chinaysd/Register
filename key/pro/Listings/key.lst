C51 COMPILER V9.59.0.0   KEY                                                               04/03/2019 14:49:58 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\key.obj
COMPILER INVOKED BY: E:\MDK\C51\BIN\C51.EXE ..\bsp\key\key.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\bsp\key;..\bsp\key;..\li
                    -b;..\TimeOut;..\user;..\bsp;..\TimeOut) DEBUG OBJECTEXTEND PRINT(.\Listings\key.lst) TABS(7) OBJECT(.\Objects\key.obj)

line level    source

   1          #include "key.h"
   2          #include "timeout.h"
   3          
   4          typedef enum {
   5              KEY_STATE_IDLE,
   6              KEY_STATE_JITTER,
   7              KEY_STATE_PRESS_DOWN,
   8              KEY_STATE_CP
   9          } KEY_STATE;
  10          
  11          
  12          static TIMEOUT_PARA Key_Scan_Timer,Key_Wait_Timer;
  13          static KEY_STATE     KeyState;
  14          static t_KEY_MSG Key_Msg;
  15          static unsigned char PreKeyIndex = MSG_INVALID;
  16          static void (*GetValueCb)(unsigned char);
  17          
  18          
  19          /**
  20                 @function: 按键事件，更多按键时，对应增加按键按键
  21                 
  22          */
  23          static xdata unsigned char KeyEvent[2][5]=
  24          {
  25                 //按键开始(按下)                   短按                                                    长按                               长按保持                                         长按松开
  26                 {MSG_KEY_NONE,                                   MSG_KEY_NONE,                                    MSG_KEY_NONE,               MSG_KEY_NONE,                                    MSG_KEY_NONE},                     // 空，无用
  27                 {MSG_KEY1_PRESS,                          MSG_KEY1_SHORT_PRESS,                            MSG_KEY1_LONGPRESS,  MSG_KEY1_LONGPRESS_HD,                           MSG_KEY1_LONGP
             -RESS_RE},              // key1
  28                 //{MSG_KEY2_PRESS,                        MSG_KEY2_SHORT_PRESS,                            MSG_KEY2_LONGPRESS,  MSG_KEY2_LONGPRESS_HD,                           MSG_KEY2_LON
             -GPRESS_RE},              // key2
  29                 //{MSG_KEY3_PRESS,                        MSG_KEY3_SHORT_PRESS,                            MSG_KEY3_LONGPRESS,  MSG_KEY3_LONGPRESS_HD,                           MSG_KEY3_L
             -ONGPRESS_RE},       // key3       
  30                 //{MSG_KEY4_PRESS,                        MSG_KEY4_SHORT_PRESS,                            MSG_KEY4_LONGPRESS,  MSG_KEY4_LONGPRESS_HD,                           MSG_KEY4_L
             -ONGPRESS_RE},       // key4       
  31                 //{MSG_KEY5_PRESS,                        MSG_KEY5_SHORT_PRESS,                            MSG_KEY5_LONGPRESS,  MSG_KEY5_LONGPRESS_HD,                           MSG_KEY5_L
             -ONGPRESS_RE},       // key5
  32                 //{MSG_KEY6_PRESS,                        MSG_KEY6_SHORT_PRESS,                            MSG_KEY6_LONGPRESS,  MSG_KEY6_LONGPRESS_HD,                           MSG_KEY6_L
             -ONGPRESS_RE},       // key6
  33                 //{MSG_KEY7_PRESS,                        MSG_KEY7_SHORT_PRESS,                            MSG_KEY7_LONGPRESS,  MSG_KEY7_LONGPRESS_HD,                           MSG_KEY7_L
             -ONGPRESS_RE},       // key7
  34              //{MSG_KEY8_PRESS,                           MSG_KEY8_SHORT_PRESS,                            MSG_KEY8_LONGPRESS,  MSG_KEY8_LONGPRESS_HD,                           MSG_KEY
             -8_LONGPRESS_RE},     // key7
  35          };
  36          
  37          /**
  38                 @function:    获取按键索引值
  39                 根据按键的个数，需要做相应的修改
  40          */
  41          static unsigned char GetKeyIndex(void)
  42          {
  43   1             extern unsigned char Key_Port_Read(unsigned char num);
  44   1             unsigned char value = 0,cnt = 0;
  45   1             #if 0
                         if(!Key_Port_Read(1) && !Key_Port_Read(2))
C51 COMPILER V9.59.0.0   KEY                                                               04/03/2019 14:49:58 PAGE 2   

                         {
                           cnt ++,value = 8;  
                           return value;
                         }
                     if(!Key_Port_Read(1))
                            cnt ++,value = 1;
                     if(!Key_Port_Read(2))
                            cnt ++,value = 2;
                     if(!Key_Port_Read(3))
                            cnt ++,value = 3;
                     if(!Key_Port_Read(4))
                            cnt ++,value = 4;
                     if(!Key_Port_Read(5))
                            cnt ++,value = 5;
                     if(!Key_Port_Read(6))
                            cnt ++,value = 6;
                     if(!Key_Port_Read(7))
                            cnt ++,value = 7;
                     #else
  66   1             if(!Key_Port_Read(1)){
  67   2                   cnt ++,value = 1;
  68   2             }
  69   1             #endif
  70   1             if(cnt > 1)
  71   1                    value = MSG_INVALID;
  72   1             return value; 
  73   1      }
  74          
  75          /**
  76                 @function:IO 和按键扫描状态的初始化
  77          */
  78          void Key_Init(void){
  79   1             extern unsigned char Key_Port_Init(void);
  80   1             
  81   1             Key_Port_Init();
  82   1             KeyState=KEY_STATE_IDLE;
  83   1             TimeOut_Record(&Key_Scan_Timer,0);
  84   1      }
  85          
  86          /**
  87                 @function:按键的扫描
  88                 @return :t_KEY_MSG 类型的消息，消息集在t_KEY_MSG中定义
  89          */
  90          t_KEY_MSG Key_Scan(void){
  91   1             unsigned char KeyIndex;
  92   1             
  93   1             if(!(TimeOutDet_Check(&Key_Scan_Timer))){
  94   2                    return MSG_INVALID;
  95   2             }
  96   1             
  97   1             TimeOut_Record(&Key_Scan_Timer,KEY_SCAN_TIME);
  98   1             
  99   1             KeyIndex=GetKeyIndex();
 100   1             if(KeyIndex == MSG_INVALID)
 101   1                    return MSG_INVALID;
 102   1      
 103   1             switch(KeyState){
 104   2                    case KEY_STATE_IDLE:{
 105   3                           if(!KeyIndex){
 106   4                                  return MSG_KEY_NONE;
 107   4                           }
 108   3                           PreKeyIndex = KeyIndex;
C51 COMPILER V9.59.0.0   KEY                                                               04/03/2019 14:49:58 PAGE 3   

 109   3                           TimeOut_Record(&Key_Wait_Timer,KEY_JITTER_TIME);
 110   3                           KeyState = KEY_STATE_JITTER;
 111   3                           break;
 112   3                    }
 113   2                    
 114   2                    case KEY_STATE_JITTER:{
 115   3                           if(PreKeyIndex != KeyIndex){
 116   4                                  KeyState = KEY_STATE_IDLE;
 117   4                           }else if(TimeOutDet_Check(&Key_Wait_Timer)){
 118   4                                  TimeOut_Record(&Key_Wait_Timer,KEY_CP_TIME);
 119   4                                  KeyState = KEY_STATE_PRESS_DOWN;
 120   4                                  return KeyEvent[PreKeyIndex][0];
 121   4                           }
 122   3                           break;
 123   3                    }
 124   2      
 125   2                    case KEY_STATE_PRESS_DOWN:{
 126   3                           if(PreKeyIndex != KeyIndex){
 127   4                                  KeyState = KEY_STATE_IDLE;
 128   4                                  return KeyEvent[PreKeyIndex][1];
 129   4                           }else if(TimeOutDet_Check(&Key_Wait_Timer)){
 130   4                                  TimeOut_Record(&Key_Wait_Timer,KEY_CPH_TIME);
 131   4                                  KeyState = KEY_STATE_CP;
 132   4                                  return KeyEvent[PreKeyIndex][2];
 133   4                           }
 134   3                           break;
 135   3                    }
 136   2                    
 137   2                    case KEY_STATE_CP:{
 138   3                           if(PreKeyIndex != KeyIndex){
 139   4                                  KeyState = KEY_STATE_IDLE;
 140   4                                  return KeyEvent[PreKeyIndex][4];
 141   4                           }else if(TimeOutDet_Check(&Key_Wait_Timer)){
 142   4                                  TimeOut_Record(&Key_Wait_Timer,KEY_CPH_TIME);
 143   4                                  return KeyEvent[PreKeyIndex][3];
 144   4                           }
 145   3                           break;
 146   3                    }
 147   2                    
 148   2                    default:{
 149   3                           KeyState = KEY_STATE_IDLE;
 150   3                           break;
 151   3                    }
 152   2             }
 153   1             return MSG_INVALID;
 154   1      }
 155          
 156          void Key_Register(void (*cb)(unsigned char))
 157          {
 158   1             if(cb){
 159   2                    GetValueCb = cb;
 160   2             }
 161   1      }
 162          
 163          void Key_Poll(void)
 164          {
 165   1             Key_Msg = Key_Scan();
 166   1             if(GetValueCb){
 167   2                    GetValueCb(Key_Msg);
 168   2             }
 169   1      }
 170          
C51 COMPILER V9.59.0.0   KEY                                                               04/03/2019 14:49:58 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    405    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
